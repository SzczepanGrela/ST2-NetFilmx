@model NetFilmx_User.Models.ViewModels.CategoryBrowseViewModel

@{
    ViewData["Title"] = Model.Category?.Name + " - Category";
}

<!-- Category Header -->
<div class="category-header">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h1 class="category-title">üìö @Model.Category?.Name</h1>
                <p class="category-subtitle">@Model.Category?.Description</p>
            </div>
        </div>
    </div>
</div>

<!-- Category Content -->
<div class="container">
    <div class="row">
        <!-- Filter Bar -->
        <div class="col-12">
            <div class="filter-bar">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="search-box">
                            <input type="text" class="form-control" placeholder="Search in this category..." 
                                   id="videoSearch" onkeyup="filterVideos()">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="sort-options">
                            <label for="sortBy">Sort by:</label>
                            <select class="form-select" id="sortBy" onchange="sortVideos()">
                                <option value="popular">Most Popular</option>
                                <option value="name">Name A-Z</option>
                                <option value="price">Price</option>
                                <option value="newest">Newest</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Videos Grid -->
    <div class="row">
        <div class="col-12">
            <div class="videos-grid" id="videosGrid">
                @if (Model.Videos?.Any() == true)
                {
                    @foreach (var video in Model.Videos)
                    {
                        <div class="video-card" data-video-name="@video.Title.ToLower()">
                            <div class="video-poster">
                                <img src="@video.ThumbnailUrl" alt="@video.Title" 
                                     class="video-thumbnail"
                                     onerror="this.src='/images/video-placeholder.jpg'">
                                <div class="video-overlay">
                                    <div class="video-actions">
                                        <a href="/Video/Details/@video.Id" class="btn btn-light btn-sm">
                                            ‚ñ∂Ô∏è Watch
                                        </a>
                                        <button class="btn btn-outline-light btn-sm" onclick="addToCart('video', @video.Id)">
                                            üõí Buy
                                        </button>
                                        <button class="btn btn-outline-light btn-sm" onclick="toggleLike(@video.Id)">
                                            ‚ù§Ô∏è Like
                                        </button>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="video-info">
                                <h5 class="video-title">@video.Title</h5>
                                <div class="video-meta">
                                    <span class="video-price">$@video.Price</span>
                                    <span class="video-views">üëÅÔ∏è Popular</span>
                                </div>
                                <p class="video-description">Click to watch this amazing video</p>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="no-videos">
                        <div class="text-center">
                            <div class="empty-icon">üé¨</div>
                            <h3>No videos in this category</h3>
                            <p>Videos will appear here when they are added to this category.</p>
                            <a href="/Category" class="btn btn-primary">Browse Other Categories</a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <!-- Suggested Videos -->
    @if (Model.Videos?.Any() == true)
    {
        <div class="row">
            <div class="col-12">
                <div class="suggested-section">
                    <h2 class="section-title">üí° You might also like</h2>
                    <div class="suggested-grid">
                        @foreach (var video in Model.Videos.Take(4))
                        {
                            <div class="suggested-item">
                                <a href="/Video/Details/@video.Id" class="suggested-link">
                                    <img src="@video.ThumbnailUrl" alt="@video.Title" 
                                         class="suggested-thumbnail"
                                         onerror="this.src='/images/video-placeholder.jpg'">
                                    <div class="suggested-info">
                                        <h6>@video.Title</h6>
                                        <p class="suggested-price">$@video.Price</p>
                                    </div>
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    
    <!-- Back Navigation -->
    <div class="row">
        <div class="col-12">
            <div class="back-navigation">
                <a href="/Category" class="btn btn-secondary">
                    ‚¨ÖÔ∏è Back to All Categories
                </a>
            </div>
        </div>
    </div>
</div>

<style>
/* Category Details Styles */
.category-header {
    background: linear-gradient(135deg, #e50914 0%, #000000 100%);
    color: white;
    padding: 3rem 0;
    margin-bottom: 2rem;
}

.category-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
}

.category-subtitle {
    font-size: 1.2rem;
    opacity: 0.9;
}

.filter-bar {
    background: #2a2a2a;
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
}

.search-box .form-control {
    background: #333;
    border: 1px solid #555;
    color: #ffffff;
    padding: 0.75rem 1rem;
    border-radius: 6px;
}

.search-box .form-control:focus {
    background: #444;
    border-color: #e50914;
    color: #ffffff;
    box-shadow: 0 0 0 0.2rem rgba(229, 9, 20, 0.25);
}

.sort-options {
    display: flex;
    align-items: center;
    gap: 1rem;
    justify-content: flex-end;
}

.sort-options label {
    color: #ffffff;
    font-weight: 500;
    white-space: nowrap;
}

.sort-options .form-select {
    background: #333;
    border: 1px solid #555;
    color: #ffffff;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    min-width: 150px;
}

.sort-options .form-select:focus {
    background: #444;
    border-color: #e50914;
    color: #ffffff;
    box-shadow: 0 0 0 0.2rem rgba(229, 9, 20, 0.25);
}

.videos-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
}

.video-card {
    background: #2a2a2a;
    border-radius: 12px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.video-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5);
}

.video-poster {
    position: relative;
    aspect-ratio: 16/9;
    overflow: hidden;
}

.video-thumbnail {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.video-card:hover .video-thumbnail {
    transform: scale(1.05);
}

.video-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.video-card:hover .video-overlay {
    opacity: 1;
}

.video-actions {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.video-info {
    padding: 1.5rem;
}

.video-title {
    color: #ffffff;
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    line-height: 1.3;
}

.video-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
}

.video-price {
    color: #e50914;
    font-weight: 600;
    font-size: 1.1rem;
}

.video-views {
    color: #aaa;
    font-size: 0.8rem;
}

.video-description {
    color: #aaa;
    font-size: 0.9rem;
    line-height: 1.4;
    margin: 0;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.no-videos {
    grid-column: 1 / -1;
    text-align: center;
    padding: 4rem 2rem;
    color: #aaa;
}

.empty-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
}

.no-videos h3 {
    color: #ffffff;
    margin-bottom: 1rem;
}

.suggested-section {
    background: #2a2a2a;
    border-radius: 12px;
    padding: 2rem;
    margin-bottom: 2rem;
}

.section-title {
    color: #ffffff;
    font-size: 1.8rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
}

.suggested-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
}

.suggested-item {
    background: #333;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.3s ease;
}

.suggested-item:hover {
    transform: translateY(-3px);
}

.suggested-link {
    display: block;
    text-decoration: none;
    color: inherit;
}

.suggested-link:hover {
    text-decoration: none;
    color: inherit;
}

.suggested-thumbnail {
    width: 100%;
    height: 120px;
    object-fit: cover;
}

.suggested-info {
    padding: 1rem;
}

.suggested-info h6 {
    color: #ffffff;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
}

.suggested-price {
    color: #e50914;
    font-weight: 600;
    margin: 0;
}

.back-navigation {
    text-align: center;
    margin-bottom: 2rem;
}

@@media (max-width: 768px) {
    .videos-grid {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
    }
    
    .filter-bar .row {
        flex-direction: column;
        gap: 1rem;
    }
    
    .sort-options {
        justify-content: flex-start;
    }
    
    .suggested-grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
}
</style>

<script>
function filterVideos() {
    const searchTerm = document.getElementById('videoSearch').value.toLowerCase();
    const videoCards = document.querySelectorAll('.video-card');
    
    videoCards.forEach(card => {
        const videoName = card.getAttribute('data-video-name');
        if (videoName.includes(searchTerm)) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

function sortVideos() {
    const sortBy = document.getElementById('sortBy').value;
    const grid = document.getElementById('videosGrid');
    const cards = Array.from(grid.querySelectorAll('.video-card'));
    
    cards.sort((a, b) => {
        const nameA = a.getAttribute('data-video-name');
        const nameB = b.getAttribute('data-video-name');
        
        switch (sortBy) {
            case 'name':
                return nameA.localeCompare(nameB);
            case 'popular':
                return nameB.localeCompare(nameA);
            case 'newest':
                return nameA.localeCompare(nameB);
            case 'price':
                return nameA.localeCompare(nameB);
            default:
                return 0;
        }
    });
    
    cards.forEach(card => grid.appendChild(card));
}

function addToCart(type, id) {
    const url = type === 'video' ? '/Cart/AddVideo' : '/Cart/AddSeries';
    const data = type === 'video' ? { videoId: id } : { seriesId: id };
    
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            updateCartCount();
            showMessage(data.message, 'success');
        } else {
            showMessage('Error adding to cart', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showMessage('Error adding to cart', 'error');
    });
}

function toggleLike(videoId) {
    showMessage('Like functionality coming soon!', 'info');
}

function updateCartCount() {
    fetch('/Cart/GetCartCount')
        .then(response => response.json())
        .then(data => {
            const cartElement = document.getElementById('cartCount');
            if (cartElement) {
                cartElement.textContent = data.count;
            }
        });
}

function showMessage(message, type) {
    const alertClass = type === 'success' ? 'alert-success' : 
                     type === 'info' ? 'alert-info' : 'alert-danger';
    
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert ${alertClass} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.querySelector('.container').prepend(alertDiv);
    
    setTimeout(() => {
        alertDiv.remove();
    }, 3000);
}
</script>