@model NetFilmx_User.Models.ViewModels.SeriesDetailViewModel

@{
    ViewData["Title"] = Model.Series.Name + " - Series";
}

<!-- Series Header -->
<div class="series-header">
    <div class="container">
        <div class="row">
            <div class="col-lg-8">
                <h1 class="series-title">üé≠ @Model.Series.Name</h1>
                <p class="series-subtitle">@Model.Series.Description</p>
                <div class="series-meta">
                    <span class="series-price">üí∞ $@Model.Series.Price for complete series</span>
                    <span class="series-episodes">üì∫ @Model.Episodes.Count episodes</span>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="series-actions">
                    <button class="btn btn-danger btn-lg" onclick="addToCart('series', @Model.Series.Id)">
                        üõí Buy Complete Series - $@Model.Series.Price
                    </button>
                    <button class="btn btn-outline-light" onclick="addToCart('series', @Model.Series.Id)">
                        üõçÔ∏è Add to Cart
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Series Content -->
<div class="container">
    <div class="row">
        <div class="col-lg-8">
            <!-- Episodes Section -->
            <div class="episodes-section">
                <div class="section-header">
                    <h2 class="section-title">üì∫ Episodes</h2>
                    <div class="episode-controls">
                        <select class="form-select" id="seasonSelect" onchange="filterEpisodes()">
                            <option value="all">All Episodes</option>
                            <option value="season1">Season 1</option>
                        </select>
                    </div>
                </div>
                
                <div class="episodes-list" id="episodesList">
                    @if (Model.Episodes?.Any() == true)
                    {
                        @for (int i = 0; i < Model.Episodes.Count; i++)
                        {
                            var episode = Model.Episodes[i];
                            <div class="episode-item" data-episode="@(i + 1)">
                                <div class="episode-thumbnail">
                                    <img src="@episode.ThumbnailUrl" alt="@episode.Title" 
                                         class="episode-image"
                                         onerror="this.src='/images/video-placeholder.jpg'">
                                    <div class="episode-overlay">
                                        <a href="/Video/Details/@episode.Id" class="play-button">
                                            ‚ñ∂Ô∏è Play Episode
                                        </a>
                                    </div>
                                    <div class="episode-number">@(i + 1)</div>
                                </div>
                                
                                <div class="episode-info">
                                    <div class="episode-header">
                                        <h4 class="episode-title">@(i + 1). @episode.Title</h4>
                                        <div class="episode-meta">
                                            <span class="episode-duration">üìÖ Episode available</span>
                                            <span class="episode-views">üëÅÔ∏è Popular episode</span>
                                        </div>
                                    </div>
                                    <p class="episode-description">Click to watch this exciting episode</p>
                                    <div class="episode-actions">
                                        <button class="btn btn-sm btn-outline-light" onclick="addToCart('video', @episode.Id)">
                                            üõí Buy Episode - $@episode.Price
                                        </button>
                                        <button class="btn btn-sm btn-outline-light" onclick="toggleLike(@episode.Id)">
                                            ‚ù§Ô∏è Like
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-episodes">
                            <div class="text-center">
                                <div class="empty-icon">üì∫</div>
                                <h3>No episodes available</h3>
                                <p>Episodes will appear here when they are added to this series.</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <!-- Series Sidebar -->
        <div class="col-lg-4">
            <div class="series-sidebar">
                <!-- Series Poster -->
                <div class="series-poster">
                    <img src="/images/series-placeholder.jpg" alt="@Model.Series.Name" class="poster-image">
                    <div class="poster-overlay">
                        <button class="btn btn-light btn-lg" onclick="addToCart('series', @Model.Series.Id)">
                            üõí Buy Now
                        </button>
                    </div>
                </div>
                
                <!-- Series Info -->
                <div class="series-info-card">
                    <h3>üìä Series Information</h3>
                    <div class="info-list">
                        <div class="info-item">
                            <span class="info-label">üí∞ Price:</span>
                            <span class="info-value">$@Model.Series.Price</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">üì∫ Episodes:</span>
                            <span class="info-value">@Model.Episodes.Count</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">üìÖ Created:</span>
                            <span class="info-value">@Model.Series.CreatedAt.ToString("MMM yyyy")</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">üîÑ Updated:</span>
                            <span class="info-value">@Model.Series.UpdatedAt.ToString("MMM yyyy")</span>
                        </div>
                    </div>
                </div>
                
                <!-- Related Series -->
                <div class="related-series">
                    <h4>üé≠ More Series</h4>
                    <div class="related-grid">
                        <div class="related-item">
                            <img src="/images/series-placeholder.jpg" alt="Related Series" class="related-thumbnail">
                            <div class="related-info">
                                <h6>Recommended Series</h6>
                                <p>Coming Soon</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Back Navigation -->
    <div class="row">
        <div class="col-12">
            <div class="back-navigation">
                <a href="/Series" class="btn btn-secondary">
                    ‚¨ÖÔ∏è Back to All Series
                </a>
            </div>
        </div>
    </div>
</div>

<style>
/* Series Details Styles */
.series-header {
    background: linear-gradient(135deg, #007bff 0%, #000000 100%);
    color: white;
    padding: 3rem 0;
    margin-bottom: 2rem;
}

.series-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
}

.series-subtitle {
    font-size: 1.2rem;
    opacity: 0.9;
    margin-bottom: 1.5rem;
}

.series-meta {
    display: flex;
    gap: 2rem;
    flex-wrap: wrap;
}

.series-price {
    font-size: 1.2rem;
    font-weight: 600;
}

.series-episodes {
    font-size: 1rem;
    opacity: 0.8;
}

.series-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    justify-content: center;
    height: 100%;
}

.episodes-section {
    background: #2a2a2a;
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
}

.section-title {
    color: #ffffff;
    font-size: 1.8rem;
    font-weight: 600;
    margin: 0;
}

.episode-controls .form-select {
    background: #333;
    border: 1px solid #555;
    color: #ffffff;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    min-width: 150px;
}

.episode-controls .form-select:focus {
    background: #444;
    border-color: #007bff;
    color: #ffffff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.episodes-list {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.episode-item {
    display: flex;
    gap: 1.5rem;
    background: #333;
    border-radius: 8px;
    padding: 1rem;
    transition: background 0.3s ease;
}

.episode-item:hover {
    background: #3a3a3a;
}

.episode-thumbnail {
    position: relative;
    width: 200px;
    height: 120px;
    flex-shrink: 0;
    border-radius: 6px;
    overflow: hidden;
}

.episode-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.episode-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.episode-thumbnail:hover .episode-overlay {
    opacity: 1;
}

.play-button {
    background: #007bff;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    text-decoration: none;
    font-weight: 600;
}

.play-button:hover {
    background: #0056b3;
    color: white;
    text-decoration: none;
}

.episode-number {
    position: absolute;
    top: 0.5rem;
    left: 0.5rem;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 600;
}

.episode-info {
    flex: 1;
    display: flex;
    flex-direction: column;
}

.episode-header {
    margin-bottom: 1rem;
}

.episode-title {
    color: #ffffff;
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.episode-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.9rem;
    color: #aaa;
}

.episode-description {
    color: #e5e5e5;
    line-height: 1.5;
    margin-bottom: 1rem;
    flex: 1;
}

.episode-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.no-episodes {
    text-align: center;
    padding: 4rem 2rem;
    color: #aaa;
}

.empty-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
}

.no-episodes h3 {
    color: #ffffff;
    margin-bottom: 1rem;
}

.series-sidebar {
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.series-poster {
    position: relative;
    aspect-ratio: 2/3;
    border-radius: 8px;
    overflow: hidden;
}

.poster-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.poster-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.series-poster:hover .poster-overlay {
    opacity: 1;
}

.series-info-card {
    background: #2a2a2a;
    border-radius: 8px;
    padding: 1.5rem;
}

.series-info-card h3 {
    color: #ffffff;
    margin-bottom: 1rem;
}

.info-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.info-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #444;
}

.info-item:last-child {
    border-bottom: none;
}

.info-label {
    color: #aaa;
    font-size: 0.9rem;
}

.info-value {
    color: #ffffff;
    font-weight: 600;
}

.related-series {
    background: #2a2a2a;
    border-radius: 8px;
    padding: 1.5rem;
}

.related-series h4 {
    color: #ffffff;
    margin-bottom: 1rem;
}

.related-item {
    display: flex;
    gap: 1rem;
    background: #333;
    border-radius: 6px;
    padding: 0.75rem;
}

.related-thumbnail {
    width: 60px;
    height: 40px;
    object-fit: cover;
    border-radius: 4px;
}

.related-info h6 {
    color: #ffffff;
    font-size: 0.9rem;
    margin-bottom: 0.25rem;
}

.related-info p {
    color: #aaa;
    font-size: 0.8rem;
    margin: 0;
}

.back-navigation {
    text-align: center;
    margin-bottom: 2rem;
}

@@media (max-width: 768px) {
    .series-meta {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .series-actions {
        margin-top: 2rem;
    }
    
    .section-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }
    
    .episode-item {
        flex-direction: column;
    }
    
    .episode-thumbnail {
        width: 100%;
        height: 200px;
    }
    
    .series-sidebar {
        margin-top: 2rem;
    }
}
</style>

<script>
function filterEpisodes() {
    const season = document.getElementById('seasonSelect').value;
    const episodes = document.querySelectorAll('.episode-item');
    
    episodes.forEach(episode => {
        if (season === 'all') {
            episode.style.display = 'flex';
        } else {
            // For now, show all episodes regardless of season selection
            // In a real implementation, this would filter by actual season data
            episode.style.display = 'flex';
        }
    });
}

function addToCart(type, id) {
    const url = type === 'video' ? '/Cart/AddVideo' : '/Cart/AddSeries';
    const data = type === 'video' ? { videoId: id } : { seriesId: id };
    
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            updateCartCount();
            showMessage(data.message, 'success');
        } else {
            showMessage('Error adding to cart', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showMessage('Error adding to cart', 'error');
    });
}

function toggleLike(videoId) {
    showMessage('Like functionality coming soon!', 'info');
}

function updateCartCount() {
    fetch('/Cart/GetCartCount')
        .then(response => response.json())
        .then(data => {
            const cartElement = document.getElementById('cartCount');
            if (cartElement) {
                cartElement.textContent = data.count;
            }
        });
}

function showMessage(message, type) {
    const alertClass = type === 'success' ? 'alert-success' : 
                     type === 'info' ? 'alert-info' : 'alert-danger';
    
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert ${alertClass} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.querySelector('.container').prepend(alertDiv);
    
    setTimeout(() => {
        alertDiv.remove();
    }, 3000);
}
</script>