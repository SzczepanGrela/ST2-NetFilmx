// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetFilmx_Storage;

#nullable disable

namespace NetFilmx_Storage.Migrations
{
    [DbContext(typeof(NetFilmxDbContext))]
    [Migration("20240728180650_TrzeciaProba")]
    partial class TrzeciaProba
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NetFilmx_Storage.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories", "NetFilmx_projekt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Podziwiaj niesamowity świat natury",
                            Name = "Zwierzęta"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Filmy edukacyjne",
                            Name = "Rozwój"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Zabawne i edukacyjne filmy",
                            Name = "Rozrywka"
                        });
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Comments", "NetFilmx_projekt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "This is a comment for the first video.",
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 706, DateTimeKind.Local).AddTicks(2656),
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 706, DateTimeKind.Local).AddTicks(2659),
                            UserId = 1,
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "This is a comment for the second video.",
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 706, DateTimeKind.Local).AddTicks(2663),
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 706, DateTimeKind.Local).AddTicks(2674),
                            UserId = 2,
                            VideoId = 2
                        });
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Likes", "NetFilmx_projekt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 706, DateTimeKind.Local).AddTicks(2682),
                            UserId = 1,
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 706, DateTimeKind.Local).AddTicks(2686),
                            UserId = 2,
                            VideoId = 2
                        });
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Series", "NetFilmx_projekt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3459),
                            Description = "Kup zestaw oryginalnych 9 filmów dostępnych na platformie",
                            Name = "Pakiet wszystkich startowych filmów",
                            Price = 149.99m,
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3461)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3463),
                            Description = "Zestaw zawierający 6 filmów poświęconych zwierzętom",
                            Name = "Pakiet świata zwierząt",
                            Price = 49.99m,
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3465)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3467),
                            Description = "Zestaw zawierający 3 filmy edukacyjne",
                            Name = "Pakiet rozwoju",
                            Price = 59.99m,
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3468)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3471),
                            Description = "Zestaw zawierający 3 filmy promocyjne, po jednym z każdej kategorii",
                            Name = "Pakiet promocyjny",
                            Price = 19.99m,
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3472)
                        });
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags", "NetFilmx_projekt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Zwierzęta"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Koty"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rozrywka"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Zabawne"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Edukacyjne"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Rozwój"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Programowanie"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Lockpicking"
                        });
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", "NetFilmx_projekt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 587, DateTimeKind.Local).AddTicks(7714),
                            Email = "user1@example.com",
                            PasswordHash = "$2a$11$2z8LDZXfMaHzEdQPxjKF8.22mEX8RSOEBeW788avvzKcUfzXfdJwi",
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 587, DateTimeKind.Local).AddTicks(7757),
                            Username = "User1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 706, DateTimeKind.Local).AddTicks(2582),
                            Email = "user2@example.com",
                            PasswordHash = "$2a$11$FZq84iCLAxBFrUsknRn7aOGmdu/wRi4.iB55uluYmc.Ve8dGiQw6.",
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 706, DateTimeKind.Local).AddTicks(2643),
                            Username = "User2"
                        });
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Videos", "NetFilmx_projekt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Discover amazing wildlife and relax! In this nature film you will see the most incredible and stunning wild animals and birds! These are some of them: Lion, Cheetah, Southern Giraffe, Tawny Eagle, Hippopotamus, African Elephant, Tiger, Zebra, Gorilla, Vulture, Bull, Deer, Monkey, Rhino, Panda, Red Panda, Bear and more. Hope you enjoy this scene with the most incredible wild animals captured on 4K ULTRA HD footage. This scenic relaxation film shows scenes of one of the most amazing landscapes in the wild world.",
                            Price = 9.99m,
                            ThumbnailUrl = "https://i.ytimg.com/vi/5kozt0uDa4c/hqdefault.jpg",
                            Title = "Amazing Scene of Wild Animals In 4K",
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3339),
                            VideoUrl = "https://www.youtube.com/watch?v=5kozt0uDa4c",
                            Views = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ultimate Wild Animals Collection in 8K ULTRA HD / 8K TV\r\nHigh Quality Animals from the World Video In Exceptional 8K HDR 60FPS Quality For Your 8K resolution device.\r\nYou can watch this collection of Ultimate Wild Animals Collection in 8K ULTRA HD / 8K TV in your TV For The Living Room, Office 365, Lounge, Waiting Room Business, Spa at home, Spa music, Showroom , Restaurant Music and much more.",
                            Price = 4.99m,
                            ThumbnailUrl = "https://i.ytimg.com/vi/Zv11L-ZfrSg/hqdefault.jpg",
                            Title = "Ultimate Wild Animals Collection in 8K ULTRA HD",
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3363),
                            VideoUrl = "https://www.youtube.com/watch?v=Zv11L-ZfrSg",
                            Views = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sit back and relax while enjoying this scenic film captures the marvelous and amazing world of cute baby animals. In this relaxation film you will find a beautiful collection of wild young babies around the world including lion cubs, bear cubs, baby elephant, baby giraffe, baby rhino and hippo, polar bear cubs, baby fox, deer, monkey and many more.",
                            Price = 6.99m,
                            ThumbnailUrl = "https://i.ytimg.com/vi/oRDRfikj2z8/hqdefault.jpg",
                            Title = "Baby Animals 4K - Amazing World Of Young Animals",
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3369),
                            VideoUrl = "https://www.youtube.com/watch?v=oRDRfikj2z8",
                            Views = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3375),
                            Description = "Cute, cuddly, and utterly chaotic! These adorable kittens are jumping in the dog-pile in this collection of cute and hilarious kitty clips!",
                            Price = 14.99m,
                            ThumbnailUrl = "https://i.ytimg.com/vi/y0sF5xhGreA/hqdefault.jpg",
                            Title = "20 Minutes of Adorable Kittens",
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3376),
                            VideoUrl = "https://www.youtube.com/watch?v=y0sF5xhGreA",
                            Views = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3381),
                            Description = "Watching funny baby cats is the hardest try not to laugh challenge.",
                            Price = 19.99m,
                            ThumbnailUrl = "https://i.ytimg.com/vi/cytJLvf-eVs/hqdefault.jpg",
                            Title = "Baby Cats - Cute and Funny Cat Videos Compilation",
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3385),
                            VideoUrl = "https://www.youtube.com/watch?v=cytJLvf-eVs",
                            Views = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3392),
                            Description = "Hoomans! Rufus here! Cats are my best frens! I made this brand new compilation for you of my favorite Cat, Kittens and even newborn kittens pets and animals! This video is so cute! Rufus approved!",
                            Price = 12.99m,
                            ThumbnailUrl = "https://i.ytimg.com/vi/tpiyEe_CqB4/hqdefault.jpg",
                            Title = "Cute and Funny Cat Videos to Keep You Smiling!",
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3418),
                            VideoUrl = "https://www.youtube.com/watch?v=tpiyEe_CqB4",
                            Views = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3424),
                            Description = "Asp.net core MVC 6.0 tutorial for beginners.",
                            Price = 14.99m,
                            ThumbnailUrl = "https://i.ytimg.com/vi/fFY9nxfILJQ/hqdefault.jpg",
                            Title = "Entity Framework Core Migration",
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3425),
                            VideoUrl = "https://www.youtube.com/watch?v=fFY9nxfILJQ",
                            Views = 0
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3431),
                            Description = "This video explores a significant security flaw discussed by LockPickingLawyer.",
                            Price = 19.99m,
                            ThumbnailUrl = "https://i.ytimg.com/vi/U5-qy2tbDG8/hqdefault.jpg",
                            Title = "The Most Significant Security Flaw in North America",
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3432),
                            VideoUrl = "https://www.youtube.com/watch?v=U5-qy2tbDG8",
                            Views = 0
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3438),
                            Description = "Unity is an amazingly powerful game engine - but it can be hard to learn. Especially if you find tutorials hard to follow and prefer to learn by doing",
                            Price = 12.99m,
                            ThumbnailUrl = "https://i.ytimg.com/vi/XtQMytORBmM/hqdefault.jpg",
                            Title = "The Unity Tutorial For Complete Beginners",
                            UpdatedAt = new DateTime(2024, 7, 28, 20, 6, 49, 471, DateTimeKind.Local).AddTicks(3439),
                            VideoUrl = "https://www.youtube.com/watch?v=XtQMytORBmM",
                            Views = 0
                        });
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.VideoCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VideoId");

                    b.ToTable("Video_Categories", "NetFilmx_projekt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            VideoId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            VideoId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            VideoId = 2
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            VideoId = 3
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            VideoId = 4
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            VideoId = 4
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            VideoId = 5
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            VideoId = 5
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            VideoId = 6
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            VideoId = 6
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            VideoId = 7
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            VideoId = 8
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            VideoId = 9
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 3,
                            VideoId = 8
                        });
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.VideoSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.HasIndex("VideoId");

                    b.ToTable("Video_Series", "NetFilmx_projekt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SeriesId = 1,
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            SeriesId = 1,
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            SeriesId = 1,
                            VideoId = 3
                        },
                        new
                        {
                            Id = 4,
                            SeriesId = 1,
                            VideoId = 4
                        },
                        new
                        {
                            Id = 5,
                            SeriesId = 1,
                            VideoId = 5
                        },
                        new
                        {
                            Id = 6,
                            SeriesId = 1,
                            VideoId = 6
                        },
                        new
                        {
                            Id = 7,
                            SeriesId = 4,
                            VideoId = 7
                        },
                        new
                        {
                            Id = 8,
                            SeriesId = 4,
                            VideoId = 8
                        },
                        new
                        {
                            Id = 9,
                            SeriesId = 4,
                            VideoId = 9
                        },
                        new
                        {
                            Id = 10,
                            SeriesId = 2,
                            VideoId = 1
                        },
                        new
                        {
                            Id = 11,
                            SeriesId = 2,
                            VideoId = 2
                        },
                        new
                        {
                            Id = 12,
                            SeriesId = 2,
                            VideoId = 3
                        },
                        new
                        {
                            Id = 13,
                            SeriesId = 2,
                            VideoId = 4
                        },
                        new
                        {
                            Id = 14,
                            SeriesId = 2,
                            VideoId = 5
                        },
                        new
                        {
                            Id = 15,
                            SeriesId = 2,
                            VideoId = 6
                        },
                        new
                        {
                            Id = 16,
                            SeriesId = 3,
                            VideoId = 7
                        },
                        new
                        {
                            Id = 17,
                            SeriesId = 3,
                            VideoId = 8
                        },
                        new
                        {
                            Id = 18,
                            SeriesId = 3,
                            VideoId = 9
                        },
                        new
                        {
                            Id = 19,
                            SeriesId = 4,
                            VideoId = 1
                        },
                        new
                        {
                            Id = 20,
                            SeriesId = 4,
                            VideoId = 4
                        },
                        new
                        {
                            Id = 21,
                            SeriesId = 4,
                            VideoId = 7
                        });
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.VideoTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("VideoId");

                    b.ToTable("Video_Tags", "NetFilmx_projekt");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TagId = 1,
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            TagId = 5,
                            VideoId = 1
                        },
                        new
                        {
                            Id = 3,
                            TagId = 1,
                            VideoId = 2
                        },
                        new
                        {
                            Id = 4,
                            TagId = 5,
                            VideoId = 2
                        },
                        new
                        {
                            Id = 5,
                            TagId = 1,
                            VideoId = 3
                        },
                        new
                        {
                            Id = 6,
                            TagId = 5,
                            VideoId = 3
                        },
                        new
                        {
                            Id = 7,
                            TagId = 2,
                            VideoId = 4
                        },
                        new
                        {
                            Id = 8,
                            TagId = 4,
                            VideoId = 4
                        },
                        new
                        {
                            Id = 9,
                            TagId = 2,
                            VideoId = 5
                        },
                        new
                        {
                            Id = 10,
                            TagId = 4,
                            VideoId = 5
                        },
                        new
                        {
                            Id = 11,
                            TagId = 2,
                            VideoId = 6
                        },
                        new
                        {
                            Id = 12,
                            TagId = 4,
                            VideoId = 6
                        },
                        new
                        {
                            Id = 13,
                            TagId = 1,
                            VideoId = 6
                        },
                        new
                        {
                            Id = 14,
                            TagId = 1,
                            VideoId = 5
                        },
                        new
                        {
                            Id = 15,
                            TagId = 1,
                            VideoId = 4
                        },
                        new
                        {
                            Id = 16,
                            TagId = 7,
                            VideoId = 7
                        },
                        new
                        {
                            Id = 17,
                            TagId = 8,
                            VideoId = 8
                        },
                        new
                        {
                            Id = 18,
                            TagId = 6,
                            VideoId = 9
                        },
                        new
                        {
                            Id = 19,
                            TagId = 7,
                            VideoId = 9
                        },
                        new
                        {
                            Id = 20,
                            TagId = 6,
                            VideoId = 7
                        });
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.Comment", b =>
                {
                    b.HasOne("NetFilmx_Storage.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetFilmx_Storage.Entities.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.Like", b =>
                {
                    b.HasOne("NetFilmx_Storage.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetFilmx_Storage.Entities.Video", "Video")
                        .WithMany("Likes")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.VideoCategory", b =>
                {
                    b.HasOne("NetFilmx_Storage.Entities.Category", "Category")
                        .WithMany("VideoCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetFilmx_Storage.Entities.Video", "Video")
                        .WithMany("VideoCategories")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.VideoSeries", b =>
                {
                    b.HasOne("NetFilmx_Storage.Entities.Series", "Series")
                        .WithMany("VideoSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetFilmx_Storage.Entities.Video", "Video")
                        .WithMany("VideoSeries")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.VideoTag", b =>
                {
                    b.HasOne("NetFilmx_Storage.Entities.Tag", "Tag")
                        .WithMany("VideoTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetFilmx_Storage.Entities.Video", "Video")
                        .WithMany("VideoTags")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.Category", b =>
                {
                    b.Navigation("VideoCategories");
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.Series", b =>
                {
                    b.Navigation("VideoSeries");
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.Tag", b =>
                {
                    b.Navigation("VideoTags");
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("NetFilmx_Storage.Entities.Video", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("VideoCategories");

                    b.Navigation("VideoSeries");

                    b.Navigation("VideoTags");
                });
#pragma warning restore 612, 618
        }
    }
}
